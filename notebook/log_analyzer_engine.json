{
	"name": "log_analyzer_engine",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "synapseenov8",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "b4104339-8485-4a1d-bd7f-da70042d6a6c"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1",
				"state": {
					"2be9226d-50df-42e0-a3da-56bb627e4d03": {
						"type": "Synapse.DataFrame",
						"sync_state": {
							"table": {
								"rows": [
									{
										"0": "128",
										"1": "SILVER",
										"2": "300",
										"3": "TAFE",
										"4": "SALMT",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-11 07:33:28.694201",
										"8": "2024-06-11 07:35:13.818106"
									},
									{
										"0": "127",
										"1": "BRONZE",
										"2": "300",
										"3": "TAFE",
										"4": "SALMT",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-11 07:32:12.439097",
										"8": "2024-06-11 07:33:25.06457"
									},
									{
										"0": "126",
										"1": "SILVER",
										"2": "299",
										"3": "TAFE",
										"4": "Peoplesoft",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-11 07:31:06.457939",
										"8": "2024-06-11 07:32:12.439097"
									},
									{
										"0": "125",
										"1": "BRONZE",
										"2": "299",
										"3": "TAFE",
										"4": "Peoplesoft",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-11 07:30:40.96061",
										"8": "2024-06-11 07:31:03.562037"
									},
									{
										"0": "124",
										"1": "SILVER",
										"2": "298",
										"3": "TAFE",
										"4": "Peoplesoft",
										"5": "FAILED",
										"6": "ERROR at TAFE/Peoplesoft",
										"7": "2024-06-11 07:26:58.234591",
										"8": "2024-06-11 07:28:41.310075"
									},
									{
										"0": "123",
										"1": "BRONZE",
										"2": "298",
										"3": "TAFE",
										"4": "Peoplesoft",
										"5": "FAILED",
										"6": "ERROR at TAFE/Peoplesoft",
										"7": "2024-06-11 07:26:33.265424",
										"8": "2024-06-11 07:28:41.310075"
									},
									{
										"0": "122",
										"1": "SILVER",
										"2": "297",
										"3": "TAFE",
										"4": "Peoplesoft",
										"5": "FAILED",
										"6": "ERROR at TAFE/Peoplesoft",
										"7": "2024-06-11 07:24:28.982066",
										"8": "2024-06-11 07:25:06.158069"
									},
									{
										"0": "121",
										"1": "BRONZE",
										"2": "297",
										"3": "TAFE",
										"4": "Peoplesoft",
										"5": "FAILED",
										"6": "ERROR at TAFE/Peoplesoft",
										"7": "2024-06-11 07:24:02.265976",
										"8": "2024-06-11 07:25:06.158069"
									},
									{
										"0": "120",
										"1": "SILVER",
										"2": "296",
										"3": "TAFE",
										"4": "Peoplesoft",
										"5": "FAILED",
										"6": "ERROR at TAFE/Peoplesoft",
										"7": "2024-06-11 07:14:48.804876",
										"8": "2024-06-11 07:17:27.010068"
									},
									{
										"0": "119",
										"1": "BRONZE",
										"2": "296",
										"3": "TAFE",
										"4": "Peoplesoft",
										"5": "FAILED",
										"6": "ERROR at TAFE/Peoplesoft",
										"7": "2024-06-11 07:14:22.954274",
										"8": "2024-06-11 07:17:27.010068"
									},
									{
										"0": "118",
										"1": "BRONZE",
										"2": "295",
										"3": "TAFE",
										"4": "Peoplesoft",
										"5": "FAILED",
										"6": "ERROR at TAFE/Peoplesoft",
										"7": "2024-06-11 07:06:08.035947",
										"8": "2024-06-11 07:06:21.478093"
									},
									{
										"0": "117",
										"1": "BRONZE",
										"2": "294",
										"3": "TAFE",
										"4": "Peoplesoft",
										"5": "FAILED",
										"6": "ERROR at TAFE/Peoplesoft",
										"7": "2024-06-11 07:05:25.946057",
										"8": "2024-06-11 07:05:41.89809"
									},
									{
										"0": "116",
										"1": "BRONZE",
										"2": "293",
										"3": "TAFE",
										"4": "Peoplesoft",
										"5": "FAILED",
										"6": "ERROR at TAFE/Peoplesoft",
										"7": "2024-06-11 06:59:33.514849",
										"8": "2024-06-11 06:59:50.570104"
									},
									{
										"0": "115",
										"1": "SILVER",
										"2": "292",
										"3": "TAFE",
										"4": "LMS",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-11 06:59:17.848607",
										"8": "2024-06-11 06:59:33.514849"
									},
									{
										"0": "114",
										"1": "BRONZE",
										"2": "292",
										"3": "TAFE",
										"4": "LMS",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-11 06:58:48.777647",
										"8": "2024-06-11 06:59:14.854189"
									},
									{
										"0": "113",
										"1": "BRONZE",
										"2": "291",
										"3": "TAFE",
										"4": "LMS",
										"5": "FAILED",
										"6": "ERROR at TAFE/LMS",
										"7": "2024-06-11 06:55:51.481495",
										"8": "2024-06-11 06:56:09.711325"
									},
									{
										"0": "112",
										"1": "SILVER",
										"2": "290",
										"3": "TAFE",
										"4": "EBS",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-11 06:55:20.456404",
										"8": "2024-06-11 06:55:51.481495"
									},
									{
										"0": "111",
										"1": "BRONZE",
										"2": "290",
										"3": "TAFE",
										"4": "EBS",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-11 06:54:45.968876",
										"8": "2024-06-11 06:55:15.417055"
									},
									{
										"0": "110",
										"1": "SILVER",
										"2": "289",
										"3": "TAFE",
										"4": "EBS",
										"5": "FAILED",
										"6": "ERROR at TAFE/EBS",
										"7": "2024-06-11 06:50:52.020768",
										"8": "2024-06-11 06:51:26.612315"
									},
									{
										"0": "109",
										"1": "BRONZE",
										"2": "289",
										"3": "TAFE",
										"4": "EBS",
										"5": "FAILED",
										"6": "ERROR at TAFE/EBS",
										"7": "2024-06-11 06:50:03.493089",
										"8": "2024-06-11 06:51:26.612315"
									},
									{
										"0": "108",
										"1": "BRONZE",
										"2": "288",
										"3": "TAFE",
										"4": "LMS",
										"5": "FAILED",
										"6": "ERROR at TAFE",
										"7": "2024-06-11 06:19:14.894645",
										"8": "2024-06-11 06:19:35.509953"
									},
									{
										"0": "107",
										"1": "SILVER",
										"2": "287",
										"3": "TAFE",
										"4": "EBS",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-11 06:18:42.394637",
										"8": "2024-06-11 06:19:14.894645"
									},
									{
										"0": "106",
										"1": "BRONZE",
										"2": "287",
										"3": "TAFE",
										"4": "EBS",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-11 06:17:11.242783",
										"8": "2024-06-11 06:18:37.108409"
									},
									{
										"0": "105",
										"1": "SILVER",
										"2": "286",
										"3": "Enov8",
										"4": "07-JUN-2024 19-29-23",
										"5": "FAILED",
										"6": "ERROR at Enov8",
										"7": "2024-06-10 19:34:21.693761",
										"8": "2024-06-10 19:34:32.595697"
									},
									{
										"0": "104",
										"1": "BRONZE",
										"2": "286",
										"3": "Enov8",
										"4": "07-JUN-2024 19-29-23",
										"5": "FAILED",
										"6": "ERROR at Enov8",
										"7": "2024-06-10 19:33:17.017129",
										"8": "2024-06-10 19:34:32.595697"
									},
									{
										"0": "103",
										"1": "SILVER",
										"2": "285",
										"3": "Enov8",
										"4": "07-JUN-2024 19-29-23",
										"5": "FAILED",
										"6": "ERROR at Enov8",
										"7": "2024-06-09 19:33:46.313873",
										"8": "2024-06-09 19:33:59.967377"
									},
									{
										"0": "102",
										"1": "BRONZE",
										"2": "285",
										"3": "Enov8",
										"4": "07-JUN-2024 19-29-23",
										"5": "FAILED",
										"6": "ERROR at Enov8",
										"7": "2024-06-09 19:32:47.510205",
										"8": "2024-06-09 19:33:59.967377"
									},
									{
										"0": "101",
										"1": "SILVER",
										"2": "284",
										"3": "Enov8",
										"4": "07-JUN-2024 19-29-23",
										"5": "FAILED",
										"6": "ERROR at Enov8",
										"7": "2024-06-08 19:33:31.973338",
										"8": "2024-06-08 19:33:42.65982"
									},
									{
										"0": "100",
										"1": "BRONZE",
										"2": "284",
										"3": "Enov8",
										"4": "07-JUN-2024 19-29-23",
										"5": "FAILED",
										"6": "ERROR at Enov8",
										"7": "2024-06-08 19:32:31.355935",
										"8": "2024-06-08 19:33:42.65982"
									},
									{
										"0": "99",
										"1": "SILVER",
										"2": "283",
										"3": "Enov8",
										"4": "07-JUN-2024 19-29-23",
										"5": "FAILED",
										"6": "ERROR at Enov8",
										"7": "2024-06-07 19:35:07.873822",
										"8": "2024-06-07 19:35:21.483799"
									},
									{
										"0": "98",
										"1": "BRONZE",
										"2": "283",
										"3": "Enov8",
										"4": "07-JUN-2024 19-29-23",
										"5": "FAILED",
										"6": "ERROR at Enov8",
										"7": "2024-06-07 19:33:46.20779",
										"8": "2024-06-07 19:35:21.483799"
									},
									{
										"0": "97",
										"1": "SILVER",
										"2": "282",
										"3": "Enov8",
										"4": "07-JUN-2024 10-55-29",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-07 05:11:00.478509",
										"8": "2024-06-07 05:11:05.513475"
									},
									{
										"0": "96",
										"1": "BRONZE",
										"2": "282",
										"3": "Enov8",
										"4": "07-JUN-2024 10-55-29",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-07 05:10:43.351992",
										"8": "2024-06-07 05:10:57.379642"
									},
									{
										"0": "95",
										"1": "SILVER",
										"2": "281",
										"3": "Enov8",
										"4": "06-JUN-2024 16-55-27",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-07 05:10:38.389936",
										"8": "2024-06-07 05:10:43.351992"
									},
									{
										"0": "94",
										"1": "BRONZE",
										"2": "281",
										"3": "Enov8",
										"4": "06-JUN-2024 16-55-27",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-07 05:10:20.007658",
										"8": "2024-06-07 05:10:33.829396"
									},
									{
										"0": "93",
										"1": "SILVER",
										"2": "280",
										"3": "Enov8",
										"4": "06-JUN-2024 14-57-54",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-07 05:10:15.186927",
										"8": "2024-06-07 05:10:20.007658"
									},
									{
										"0": "92",
										"1": "BRONZE",
										"2": "280",
										"3": "Enov8",
										"4": "06-JUN-2024 14-57-54",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-07 05:09:58.904281",
										"8": "2024-06-07 05:10:12.34768"
									},
									{
										"0": "91",
										"1": "SILVER",
										"2": "279",
										"3": "Enov8",
										"4": "06-JUN-2024 10-55-31",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-07 05:09:53.99086",
										"8": "2024-06-07 05:09:58.904281"
									},
									{
										"0": "90",
										"1": "BRONZE",
										"2": "279",
										"3": "Enov8",
										"4": "06-JUN-2024 10-55-31",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-07 05:09:34.749266",
										"8": "2024-06-07 05:09:51.067689"
									},
									{
										"0": "89",
										"1": "SILVER",
										"2": "278",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-07 05:09:27.690826",
										"8": "2024-06-07 05:09:34.749266"
									},
									{
										"0": "88",
										"1": "BRONZE",
										"2": "278",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-07 05:09:07.234811",
										"8": "2024-06-07 05:09:23.807962"
									},
									{
										"0": "87",
										"1": "SILVER",
										"2": "277",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-07 05:09:00.219132",
										"8": "2024-06-07 05:09:07.234811"
									},
									{
										"0": "86",
										"1": "BRONZE",
										"2": "277",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-07 05:07:53.537238",
										"8": "2024-06-07 05:08:54.43016"
									},
									{
										"0": "85",
										"1": "SILVER",
										"2": "276",
										"3": "TAFE",
										"4": "EBS",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-06 19:34:02.521197",
										"8": "2024-06-06 19:34:10.862945"
									},
									{
										"0": "84",
										"1": "BRONZE",
										"2": "276",
										"3": "TAFE",
										"4": "EBS",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-06 19:32:50.977983",
										"8": "2024-06-06 19:33:54.189203"
									},
									{
										"0": "83",
										"1": "SILVER",
										"2": "275",
										"3": "TAFE",
										"4": "EBS",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-06 08:51:47.467516",
										"8": "2024-06-06 08:51:53.774813"
									},
									{
										"0": "82",
										"1": "BRONZE",
										"2": "275",
										"3": "TAFE",
										"4": "EBS",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-06 08:51:23.247302",
										"8": "2024-06-06 08:51:38.180407"
									},
									{
										"0": "81",
										"1": "SILVER",
										"2": "274",
										"3": "TAFE",
										"4": "PeopleSoft",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-06 08:40:22.801705",
										"8": "2024-06-06 08:40:27.229648"
									},
									{
										"0": "80",
										"1": "BRONZE",
										"2": "274",
										"3": "TAFE",
										"4": "PeopleSoft",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-06 08:40:05.090259",
										"8": "2024-06-06 08:40:20.013676"
									},
									{
										"0": "79",
										"1": "SILVER",
										"2": "79",
										"3": "TAFE",
										"4": "PeopleSoft",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-06 08:37:20.585548",
										"8": "2024-06-06 08:37:25.571079"
									},
									{
										"0": "78",
										"1": "BRONZE",
										"2": "79",
										"3": "TAFE",
										"4": "PeopleSoft",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-06 08:37:02.271674",
										"8": "2024-06-06 08:37:17.333236"
									},
									{
										"0": "77",
										"1": "SILVER",
										"2": "273",
										"3": "TAFE",
										"4": "PeopleSoft",
										"5": "FAILED",
										"6": "ERROR at TAFE",
										"7": "2024-06-06 08:35:51.178137",
										"8": "2024-06-06 08:36:47.024387"
									},
									{
										"0": "76",
										"1": "BRONZE",
										"2": "273",
										"3": "TAFE",
										"4": "PeopleSoft",
										"5": "FAILED",
										"6": "ERROR at TAFE",
										"7": "2024-06-06 08:35:32.110921",
										"8": "2024-06-06 08:36:47.024387"
									},
									{
										"0": "75",
										"1": "SILVER",
										"2": "273",
										"3": "TAFE",
										"4": "PeopleSoft",
										"5": "FAILED",
										"6": "ERROR at TAFE",
										"7": "2024-06-06 08:32:02.774202",
										"8": "2024-06-06 08:36:47.024387"
									},
									{
										"0": "74",
										"1": "BRONZE",
										"2": "273",
										"3": "TAFE",
										"4": "PeopleSoft",
										"5": "FAILED",
										"6": "ERROR at TAFE",
										"7": "2024-06-06 08:31:23.731917",
										"8": "2024-06-06 08:36:47.024387"
									},
									{
										"0": "73",
										"1": "SILVER",
										"2": "272",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-05 19:36:10.270834",
										"8": "2024-06-05 19:36:15.364753"
									},
									{
										"0": "72",
										"1": "BRONZE",
										"2": "272",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-05 19:35:47.187561",
										"8": "2024-06-05 19:36:06.813037"
									},
									{
										"0": "71",
										"1": "SILVER",
										"2": "271",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-05 19:35:40.46066",
										"8": "2024-06-05 19:35:47.187561"
									},
									{
										"0": "70",
										"1": "BRONZE",
										"2": "271",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-05 19:34:11.312417",
										"8": "2024-06-05 19:35:32.88458"
									},
									{
										"0": "69",
										"1": "SILVER",
										"2": "270",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 19:34:34.674324",
										"8": "2024-06-04 19:34:40.396449"
									},
									{
										"0": "68",
										"1": "BRONZE",
										"2": "270",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 19:34:10.837132",
										"8": "2024-06-04 19:34:31.095016"
									},
									{
										"0": "67",
										"1": "SILVER",
										"2": "269",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 19:34:04.61484",
										"8": "2024-06-04 19:34:10.837132"
									},
									{
										"0": "66",
										"1": "BRONZE",
										"2": "269",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 19:32:48.77349",
										"8": "2024-06-04 19:33:59.669321"
									},
									{
										"0": "65",
										"1": "SILVER",
										"2": "268",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:37:34.000744",
										"8": "2024-06-04 08:37:39.132329"
									},
									{
										"0": "64",
										"1": "BRONZE",
										"2": "268",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:37:14.585007",
										"8": "2024-06-04 08:37:31.325866"
									},
									{
										"0": "63",
										"1": "SILVER",
										"2": "267",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:37:10.091309",
										"8": "2024-06-04 08:37:14.585007"
									},
									{
										"0": "62",
										"1": "BRONZE",
										"2": "267",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:36:53.064907",
										"8": "2024-06-04 08:37:07.464706"
									},
									{
										"0": "61",
										"1": "SILVER",
										"2": "266",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:35:19.707705",
										"8": "2024-06-04 08:35:24.415452"
									},
									{
										"0": "60",
										"1": "BRONZE",
										"2": "266",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:34:57.614761",
										"8": "2024-06-04 08:35:15.838769"
									},
									{
										"0": "59",
										"1": "SILVER",
										"2": "265",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:34:51.714153",
										"8": "2024-06-04 08:34:57.614761"
									},
									{
										"0": "58",
										"1": "BRONZE",
										"2": "265",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:34:34.835043",
										"8": "2024-06-04 08:34:48.995739"
									},
									{
										"0": "57",
										"1": "SILVER",
										"2": "264",
										"3": "Enov8",
										"4": "31-MAY-2024 22-55-18",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:22:07.517135",
										"8": "2024-06-04 08:22:12.002772"
									},
									{
										"0": "56",
										"1": "BRONZE",
										"2": "264",
										"3": "Enov8",
										"4": "31-MAY-2024 22-55-18",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:21:46.850354",
										"8": "2024-06-04 08:22:05.019376"
									},
									{
										"0": "55",
										"1": "SILVER",
										"2": "263",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:21:41.877464",
										"8": "2024-06-04 08:21:46.850354"
									},
									{
										"0": "54",
										"1": "BRONZE",
										"2": "263",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:21:22.599084",
										"8": "2024-06-04 08:21:39.213238"
									},
									{
										"0": "53",
										"1": "SILVER",
										"2": "262",
										"3": "Enov8",
										"4": "03-JUN-2024 14-55-22",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:21:18.276511",
										"8": "2024-06-04 08:21:22.599084"
									},
									{
										"0": "52",
										"1": "BRONZE",
										"2": "262",
										"3": "Enov8",
										"4": "03-JUN-2024 14-55-22",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:20:58.923002",
										"8": "2024-06-04 08:21:15.654095"
									},
									{
										"0": "51",
										"1": "SILVER",
										"2": "261",
										"3": "Enov8",
										"4": "03-JUN-2024 14-48-25",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:20:54.611022",
										"8": "2024-06-04 08:20:58.923002"
									},
									{
										"0": "50",
										"1": "BRONZE",
										"2": "261",
										"3": "Enov8",
										"4": "03-JUN-2024 14-48-25",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:20:33.051969",
										"8": "2024-06-04 08:20:50.70926"
									},
									{
										"0": "49",
										"1": "SILVER",
										"2": "260",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:20:28.731249",
										"8": "2024-06-04 08:20:33.051969"
									},
									{
										"0": "48",
										"1": "BRONZE",
										"2": "260",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:20:11.512544",
										"8": "2024-06-04 08:20:25.813068"
									},
									{
										"0": "47",
										"1": "SILVER",
										"2": "259",
										"3": "Enov8",
										"4": "31-MAY-2024 22-55-18",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:19:16.123955",
										"8": "2024-06-04 08:19:21.059863"
									},
									{
										"0": "46",
										"1": "BRONZE",
										"2": "259",
										"3": "Enov8",
										"4": "31-MAY-2024 22-55-18",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:18:55.239715",
										"8": "2024-06-04 08:19:13.520766"
									},
									{
										"0": "45",
										"1": "SILVER",
										"2": "258",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:18:49.607624",
										"8": "2024-06-04 08:18:55.239715"
									},
									{
										"0": "44",
										"1": "BRONZE",
										"2": "258",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:18:29.576365",
										"8": "2024-06-04 08:18:46.577617"
									},
									{
										"0": "43",
										"1": "SILVER",
										"2": "257",
										"3": "Enov8",
										"4": "03-JUN-2024 14-55-22",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:18:24.235939",
										"8": "2024-06-04 08:18:29.576365"
									},
									{
										"0": "42",
										"1": "BRONZE",
										"2": "257",
										"3": "Enov8",
										"4": "03-JUN-2024 14-55-22",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:18:03.829629",
										"8": "2024-06-04 08:18:21.317242"
									},
									{
										"0": "41",
										"1": "SILVER",
										"2": "256",
										"3": "Enov8",
										"4": "03-JUN-2024 14-48-25",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:17:58.332337",
										"8": "2024-06-04 08:18:03.829629"
									},
									{
										"0": "40",
										"1": "BRONZE",
										"2": "256",
										"3": "Enov8",
										"4": "03-JUN-2024 14-48-25",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:17:31.062395",
										"8": "2024-06-04 08:17:52.931464"
									},
									{
										"0": "39",
										"1": "SILVER",
										"2": "255",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:17:23.498116",
										"8": "2024-06-04 08:17:31.062395"
									},
									{
										"0": "38",
										"1": "BRONZE",
										"2": "255",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 08:16:05.515991",
										"8": "2024-06-04 08:17:18.087021"
									},
									{
										"0": "37",
										"1": "SILVER",
										"2": "254",
										"3": "Enov8",
										"4": "31-MAY-2024 22-55-18/logs_Enov8_Mask - Azure MySQL Enov8 Mask Config-TDM-Automation_31-MAY-2024 22-55-18.txt",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 07:01:15.328954",
										"8": "2024-06-04 07:01:19.458503"
									},
									{
										"0": "36",
										"1": "BRONZE",
										"2": "254",
										"3": "Enov8",
										"4": "31-MAY-2024 22-55-18",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 07:00:56.252513",
										"8": "2024-06-04 07:01:12.769169"
									},
									{
										"0": "35",
										"1": "SILVER",
										"2": "253",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28/logs_Enov8_Mask - Azure MySQL Enov8 Mask Config-TDM-Automation_04-JUN-2024 14-55-28.txt",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 07:00:51.459007",
										"8": "2024-06-04 07:00:56.252513"
									},
									{
										"0": "34",
										"1": "BRONZE",
										"2": "253",
										"3": "Enov8",
										"4": "04-JUN-2024 14-55-28",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 07:00:32.906351",
										"8": "2024-06-04 07:00:48.885562"
									},
									{
										"0": "33",
										"1": "SILVER",
										"2": "252",
										"3": "Enov8",
										"4": "03-JUN-2024 14-55-22/logs_Enov8_Mask - Azure MySQL Enov8 Mask Config-TDM-Automation_03-JUN-2024 14-55-22.txt",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 07:00:28.908519",
										"8": "2024-06-04 07:00:32.906351"
									},
									{
										"0": "32",
										"1": "BRONZE",
										"2": "252",
										"3": "Enov8",
										"4": "03-JUN-2024 14-55-22",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 07:00:10.602679",
										"8": "2024-06-04 07:00:26.444133"
									},
									{
										"0": "31",
										"1": "SILVER",
										"2": "251",
										"3": "Enov8",
										"4": "03-JUN-2024 14-48-25/logs_Enov8_Mask - Azure MySQL Enov8 Mask Config-TDM-Automation_03-JUN-2024 14-48-25.txt",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 07:00:06.613057",
										"8": "2024-06-04 07:00:10.602679"
									},
									{
										"0": "30",
										"1": "BRONZE",
										"2": "251",
										"3": "Enov8",
										"4": "03-JUN-2024 14-48-25",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:59:46.0729",
										"8": "2024-06-04 07:00:02.955661"
									},
									{
										"0": "29",
										"1": "SILVER",
										"2": "250",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43/logs_CDW_Mask - Azure MSSQL Mask Config People Subset-TDM-Automation_31-MAY-2024 22-55-43.txt",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:59:41.601499",
										"8": "2024-06-04 06:59:46.0729"
									},
									{
										"0": "28",
										"1": "BRONZE",
										"2": "250",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:59:22.324224",
										"8": "2024-06-04 06:59:38.794476"
									},
									{
										"0": "27",
										"1": "BRONZE",
										"2": "250",
										"3": "Enov8",
										"4": "03-JUN-2024 14-48-25",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:58:03.887436",
										"8": "2024-06-04 06:59:38.794476"
									},
									{
										"0": "26",
										"1": "BRONZE",
										"2": "250",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:57:55.897557",
										"8": "2024-06-04 06:59:38.794476"
									},
									{
										"0": "25",
										"1": "BRONZE",
										"2": "250",
										"3": "Enov8",
										"4": "03-JUN-2024 14-48-25",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:57:12.89545",
										"8": "2024-06-04 06:59:38.794476"
									},
									{
										"0": "24",
										"1": "BRONZE",
										"2": "250",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:57:04.844643",
										"8": "2024-06-04 06:59:38.794476"
									},
									{
										"0": "23",
										"1": "BRONZE",
										"2": "250",
										"3": "Enov8",
										"4": "03-JUN-2024 14-48-25",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:55:54.211609",
										"8": "2024-06-04 06:59:38.794476"
									},
									{
										"0": "22",
										"1": "BRONZE",
										"2": "250",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:55:46.130411",
										"8": "2024-06-04 06:59:38.794476"
									},
									{
										"0": "21",
										"1": "BRONZE",
										"2": "250",
										"3": "Enov8",
										"4": "03-JUN-2024 14-48-25",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:55:23.734056",
										"8": "2024-06-04 06:59:38.794476"
									},
									{
										"0": "20",
										"1": "BRONZE",
										"2": "250",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:55:13.980173",
										"8": "2024-06-04 06:59:38.794476"
									},
									{
										"0": "19",
										"1": "BRONZE",
										"2": "250",
										"3": "Enov8",
										"4": "03-JUN-2024 14-48-25",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:54:43.371018",
										"8": "2024-06-04 06:59:38.794476"
									},
									{
										"0": "18",
										"1": "BRONZE",
										"2": "250",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:54:34.997231",
										"8": "2024-06-04 06:59:38.794476"
									},
									{
										"0": "17",
										"1": "BRONZE",
										"2": "250",
										"3": "Enov8",
										"4": "03-JUN-2024 14-48-25",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:53:25.618346",
										"8": "2024-06-04 06:59:38.794476"
									},
									{
										"0": "16",
										"1": "BRONZE",
										"2": "250",
										"3": "CDW",
										"4": "31-MAY-2024 22-55-43",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-06-04 06:53:14.787236",
										"8": "2024-06-04 06:59:38.794476"
									},
									{
										"0": "15",
										"1": "BRONZE",
										"2": "249",
										"3": "PS",
										"4": "Peoplesoft_PSADM_DEV4_Masking_Config_IT1_Implementation_20.12.2023.txt/logs_ebs_0165_18012024.txt",
										"5": "FAILED",
										"6": "ERROR at PS",
										"7": "2024-05-31 07:02:35.415719",
										"8": "2024-05-31 07:03:03.429981"
									},
									{
										"0": "14",
										"1": "SILVER",
										"2": "248",
										"3": "ebs",
										"4": "logs_ebs_0165_18012024.txt/logs_ebs_0165_18012024.txt",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-05-31 07:02:28.356065",
										"8": "2024-05-31 07:02:35.415719"
									},
									{
										"0": "13",
										"1": "BRONZE",
										"2": "248",
										"3": "ebs",
										"4": "logs_ebs_0165_18012024.txt/logs_ebs_tribal427_18012024.txt",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-05-31 07:02:01.679433",
										"8": "2024-05-31 07:02:23.645195"
									},
									{
										"0": "12",
										"1": "SILVER",
										"2": "247",
										"3": "ebs",
										"4": "logs_ebs_tribal427_18012024.txt/logs_ebs_tribal427_18012024.txt",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-05-31 07:01:54.782479",
										"8": "2024-05-31 07:02:01.679433"
									},
									{
										"0": "11",
										"1": "BRONZE",
										"2": "247",
										"3": "ebs",
										"4": "logs_ebs_tribal427_18012024.txt/logs_ebs_0165dm_18012024.txt",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-05-31 07:01:30.94154",
										"8": "2024-05-31 07:01:50.278773"
									},
									{
										"0": "10",
										"1": "SILVER",
										"2": "246",
										"3": "ebs",
										"4": "logs_ebs_0165dm_18012024.txt/logs_ebs_0165dm_18012024.txt",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-05-31 07:01:26.41354",
										"8": "2024-05-31 07:01:30.94154"
									},
									{
										"0": "9",
										"1": "BRONZE",
										"2": "246",
										"3": "ebs",
										"4": "logs_ebs_0165dm_18012024.txt/Azure MySQL Enov8 Mask Config-TDM-Automation.csv",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-05-31 07:01:09.220164",
										"8": "2024-05-31 07:01:24.127577"
									},
									{
										"0": "8",
										"1": "BRONZE",
										"2": "245",
										"3": "Enov8",
										"4": "31-MAY-2024 15-01-00/logs_Enov8_Mask - Azure MySQL Enov8 Mask Config-TDM-Automation_23-APR-2024 16-48-00.txt",
										"5": "FAILED",
										"6": "ERROR at Enov8",
										"7": "2024-05-31 07:00:54.423502",
										"8": "2024-05-31 07:01:09.220164"
									},
									{
										"0": "7",
										"1": "SILVER",
										"2": "244",
										"3": "Enov8",
										"4": "logs_Enov8_Mask - Azure MySQL Enov8 Mask Config-TDM-Automation_23-APR-2024 16-48-00.txt/logs_Enov8_Mask - Azure MySQL Enov8 Mask Config-TDM-Automation_23-APR-2024 16-48-00.txt",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-05-31 07:00:50.398738",
										"8": "2024-05-31 07:00:54.423502"
									},
									{
										"0": "6",
										"1": "BRONZE",
										"2": "244",
										"3": "Enov8",
										"4": "logs_Enov8_Mask - Azure MySQL Enov8 Mask Config-TDM-Automation_23-APR-2024 16-48-00.txt/Azure MSSQL Mask Config People Subset-TDM-Automation.csv",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-05-31 07:00:33.165765",
										"8": "2024-05-31 07:00:48.193956"
									},
									{
										"0": "5",
										"1": "BRONZE",
										"2": "244",
										"3": "CDW",
										"4": "30-MAY-2024 21-30-50/logs_LMS_Mask - Azure MySQL LMS Mask Config-TDM-Automation_23-APR-2024 13-37-54.txt",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-05-31 07:00:22.775282",
										"8": "2024-05-31 07:00:48.193956"
									},
									{
										"0": "4",
										"1": "SILVER",
										"2": "243",
										"3": "LMS",
										"4": "logs_LMS_Mask - Azure MySQL LMS Mask Config-TDM-Automation_23-APR-2024 13-37-54.txt/logs_LMS_Mask - Azure MySQL LMS Mask Config-TDM-Automation_23-APR-2024 13-37-54.txt",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-05-31 07:00:18.890799",
										"8": "2024-05-31 07:00:22.775282"
									},
									{
										"0": "3",
										"1": "BRONZE",
										"2": "243",
										"3": "LMS",
										"4": "logs_LMS_Mask - Azure MySQL LMS Mask Config-TDM-Automation_23-APR-2024 13-37-54.txt/Azure MSSQL Mask Config People Subset-TDM-Automation.csv",
										"5": "COMPLETED",
										"6": "SUCCESS",
										"7": "2024-05-31 07:00:02.06619",
										"8": "2024-05-31 07:00:16.603927"
									},
									{
										"0": "2",
										"1": "BRONZE",
										"2": "242",
										"3": "TEST",
										"4": "28-JAN-2024 20-44-47/PS",
										"5": "FAILED",
										"6": "ERROR at TEST",
										"7": "2024-05-31 06:59:47.656397",
										"8": "2024-05-31 07:00:02.06619"
									},
									{
										"0": "1",
										"1": "BRONZE",
										"2": "242",
										"3": "Customer_Platform",
										"4": "TAFE/Azure MSSQL Mask Config People Subset-TDM-Automation.csv",
										"5": "FAILED",
										"6": "ERROR at TEST",
										"7": "2024-05-31 06:59:40.675251",
										"8": "2024-05-31 07:00:02.06619"
									},
									{
										"0": "0",
										"1": "INIT"
									}
								],
								"schema": [
									{
										"key": "0",
										"name": "RUN_ID",
										"type": "int"
									},
									{
										"key": "1",
										"name": "STAGE",
										"type": "string"
									},
									{
										"key": "2",
										"name": "CYCLE_ID",
										"type": "bigint"
									},
									{
										"key": "3",
										"name": "APPLICATION_NAME",
										"type": "string"
									},
									{
										"key": "4",
										"name": "PROCESSED_FOLDER_NAME",
										"type": "string"
									},
									{
										"key": "5",
										"name": "STATUS",
										"type": "string"
									},
									{
										"key": "6",
										"name": "AUDIT_MESSAGE",
										"type": "string"
									},
									{
										"key": "7",
										"name": "RUN_START_DTTM",
										"type": "timestamp"
									},
									{
										"key": "8",
										"name": "RUN_END_DTTM",
										"type": "timestamp"
									}
								],
								"truncated": false
							},
							"isSummary": false,
							"language": "scala"
						},
						"persist_state": {
							"view": {
								"type": "details",
								"chartOptions": {
									"chartType": "bar",
									"aggregationType": "sum",
									"categoryFieldKeys": [
										"1"
									],
									"seriesFieldKeys": [
										"0"
									],
									"isStacked": false
								}
							}
						}
					}
				}
			},
			"enableDebugMode": false,
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/e5eee262-fe88-4823-bfbb-8bfd215f2eca/resourceGroups/tdm_resourcegrp/providers/Microsoft.Synapse/workspaces/tdmsynapsetst/bigDataPools/synapseenov8",
				"name": "synapseenov8",
				"type": "Spark",
				"endpoint": "https://tdmsynapsetst.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/synapseenov8",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.4",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# **Initiate Connection to Blob**"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"from pyspark.sql import SparkSession\r\n",
					"\r\n",
					"# Set the Spark configurations\r\n",
					"spark.conf.set(\"fs.azure.account.auth.type.tdmstoragegen2.dfs.core.windows.net\", \"OAuth\")\r\n",
					"spark.conf.set(\"fs.azure.account.oauth.provider.type.tdmstoragegen2.dfs.core.windows.net\", \"org.apache.hadoop.fs.azurebfs.oauth2.ClientCredsTokenProvider\")\r\n",
					"spark.conf.set(\"fs.azure.account.oauth2.client.id.tdmstoragegen2.dfs.core.windows.net\", \"62c3a03c-5a01-4f3e-a226-f9f9aa27fa02\")\r\n",
					"spark.conf.set(\"fs.azure.account.oauth2.client.secret.tdmstoragegen2.dfs.core.windows.net\", \"TDh8Q~J96UD2WuXmsmthmd0.P0OdIWQjS6e56dsX\")\r\n",
					"spark.conf.set(\"fs.azure.account.oauth2.client.endpoint.tdmstoragegen2.dfs.core.windows.net\", \"https://login.microsoftonline.com/1a35b43f-3f7e-4bb9-be3c-9ff6b2464e1a/oauth2/token\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Azure storage access info\r\n",
					"blob_account_name = 'tdmstoragegen2 '  # replace with your blob name\r\n",
					"blob_container_name = 'tdmfilesystem'  # replace with your container name\r\n",
					"blob_relative_path = '/'  # replace with your relative folder path\r\n",
					"sas_token = 'sp=racwdlmeop&st=2024-04-23T06:35:22Z&se=2024-05-02T14:35:22Z&sip=220.233.222.90&sv=2022-11-02&sr=c&sig=FgO7jIWHxMwdc%2BriHIjMrocoxH0UD%2BCRHK4lNcathu8%3D'  # replace with your SAS token\r\n",
					"\r\n",
					"# Construct the complete path with SAS token\r\n",
					"wasb_path_with_sas = 'wasbs://tdmfilesystem@tdmstoragegen2.blob.core.windows.net/%s?%s' % (\r\n",
					"     blob_relative_path, sas_token)\r\n",
					"\r\n",
					"# Initialize SparkSession\r\n",
					"spark = SparkSession.builder \\\r\n",
					"    .appName(\"YourAppName\") \\\r\n",
					"    .getOrCreate()\r\n",
					"\r\n",
					"# Set configuration to allow Spark to access the Blob storage with SAS token\r\n",
					"spark.conf.set(\r\n",
					"    'fs.azure.sas.%s.%s.blob.core.windows.net' % (blob_container_name, blob_account_name),\r\n",
					"    sas_token)\r\n",
					"\r\n",
					"# Print the remote blob path with SAS token\r\n",
					"print('Remote blob path with SAS token: ' + wasb_path_with_sas)\r\n",
					""
				],
				"execution_count": 1
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# **Define Function**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# -*- coding: utf-8 -*-\r\n",
					"import json\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"tdm_message_font = '''{\r\n",
					"  \"start\": \"\\\\n███╗   ███╗ █████╗ ███████╗██╗  ██╗    ███████╗████████╗ █████╗ ██████╗ ████████╗███████╗██████╗ \\\\n████╗ ████║██╔══██╗██╔════╝██║ ██╔╝    ██╔════╝╚══██╔══╝██╔══██╗██╔══██╗╚══██╔══╝██╔════╝██╔══██╗\\\\n██╔████╔██║███████║███████╗█████╔╝     ███████╗   ██║   ███████║██████╔╝   ██║   █████╗  ██║  ██║\\\\n██║╚██╔╝██║██╔══██║╚════██║██╔═██╗     ╚════██║   ██║   ██╔══██║██╔══██╗   ██║   ██╔══╝  ██║  ██║\\\\n██║ ╚═╝ ██║██║  ██║███████║██║  ██╗    ███████║   ██║   ██║  ██║██║  ██║   ██║   ███████╗██████╔╝\\\\n╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝    ╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝   ╚═╝   ╚══════╝╚═════╝ \\\\n                                                                                                 \\\\n\",\r\n",
					"  \"pause\": \"\\\\n███╗   ███╗ █████╗ ███████╗██╗  ██╗    ██████╗  █████╗ ██╗   ██╗███████╗███████╗██████╗ \\\\n████╗ ████║██╔══██╗██╔════╝██║ ██╔╝    ██╔══██╗██╔══██╗██║   ██║██╔════╝██╔════╝██╔══██╗\\\\n██╔████╔██║███████║███████╗█████╔╝     ██████╔╝███████║██║   ██║███████╗█████╗  ██║  ██║\\\\n██║╚██╔╝██║██╔══██║╚════██║██╔═██╗     ██╔═══╝ ██╔══██║██║   ██║╚════██║██╔══╝  ██║  ██║\\\\n██║ ╚═╝ ██║██║  ██║███████║██║  ██╗    ██║     ██║  ██║╚██████╔╝███████║███████╗██████╔╝\\\\n╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝    ╚═╝     ╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚══════╝╚═════╝ \\\\n                                                                                        \\\\n\",\r\n",
					"  \"resume\": \"\\\\n███╗   ███╗ █████╗ ███████╗██╗  ██╗    ██████╗ ███████╗███████╗██╗   ██╗███╗   ███╗███████╗██████╗ \\\\n████╗ ████║██╔══██╗██╔════╝██║ ██╔╝    ██╔══██╗██╔════╝██╔════╝██║   ██║████╗ ████║██╔════╝██╔══██╗\\\\n██╔████╔██║███████║███████╗█████╔╝     ██████╔╝█████╗  ███████╗██║   ██║██╔████╔██║█████╗  ██║  ██║\\\\n██║╚██╔╝██║██╔══██║╚════██║██╔═██╗     ██╔══██╗██╔══╝  ╚════██║██║   ██║██║╚██╔╝██║██╔══╝  ██║  ██║\\\\n██║ ╚═╝ ██║██║  ██║███████║██║  ██╗    ██║  ██║███████╗███████║╚██████╔╝██║ ╚═╝ ██║███████╗██████╔╝\\\\n╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝    ╚═╝  ╚═╝╚══════╝╚══════╝ ╚═════╝ ╚═╝     ╚═╝╚══════╝╚═════╝ \\\\n                                                                                                   \\\\n\",\r\n",
					"  \"finish\": \"\\\\n███╗   ███╗ █████╗ ███████╗██╗  ██╗    ███████╗██╗███╗   ██╗██╗███████╗██╗  ██╗███████╗██████╗ \\\\n████╗ ████║██╔══██╗██╔════╝██║ ██╔╝    ██╔════╝██║████╗  ██║██║██╔════╝██║  ██║██╔════╝██╔══██╗\\\\n██╔████╔██║███████║███████╗█████╔╝     █████╗  ██║██╔██╗ ██║██║███████╗███████║█████╗  ██║  ██║\\\\n██║╚██╔╝██║██╔══██║╚════██║██╔═██╗     ██╔══╝  ██║██║╚██╗██║██║╚════██║██╔══██║██╔══╝  ██║  ██║\\\\n██║ ╚═╝ ██║██║  ██║███████║██║  ██╗    ██║     ██║██║ ╚████║██║███████║██║  ██║███████╗██████╔╝\\\\n╚═╝     ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝    ╚═╝     ╚═╝╚═╝  ╚═══╝╚═╝╚══════╝╚═╝  ╚═╝╚══════╝╚═════╝ \\\\n                                                                                               \\\\n\"\r\n",
					"}'''\r\n",
					"\r\n",
					"try:\r\n",
					"    data = json.loads(tdm_message_font)\r\n",
					"    #######logger.info(\"JSON loaded successfully\")\r\n",
					"except json.JSONDecodeError as e:\r\n",
					"    #######logger.warning(f\"Error decoding Message font JSON: {e}\")\r\n",
					"    data = None  # Define data as None to avoid NameError later\r\n",
					"\r\n",
					"# Extract the values\r\n",
					"if data is not None:\r\n",
					"    start_value = data['start']\r\n",
					"    pause_value = data['pause']\r\n",
					"    resume_value = data['resume']\r\n",
					"    finish_value = data['finish']\r\n",
					"\r\n",
					"    # Print values for verification\r\n",
					"    #print(start_value, pause_value, resume_value, finish_value)\r\n",
					"\r\n",
					"def find_multiline_font(file_path, target_string):\r\n",
					"    # Normalize line endings and trim whitespace in target_string\r\n",
					"    target_string = target_string.strip().replace('\\r\\n', '\\n')\r\n",
					"\r\n",
					"    num_lines_in_target = target_string.count('\\n') + 1\r\n",
					"\r\n",
					"    # with open(file_path, 'r', encoding='utf-8') as file:\r\n",
					"    df2 = spark.read.text(file_path)\r\n",
					"\r\n",
					"    lines = []\r\n",
					"    line_num = 0\r\n",
					"    for line in df2.collect():\r\n",
					"        line_num += 1\r\n",
					"        if 2 <= line_num <= 8:  # Reading lines 2 to 8\r\n",
					"            lines.append(line.value.rstrip('\\n'))  # Trim newline character\r\n",
					"            if len(lines) == num_lines_in_target:\r\n",
					"                combined_lines = '\\n'.join(lines).strip()  # Combine and trim\r\n",
					"                if combined_lines == target_string:\r\n",
					"                    return True\r\n",
					"                lines.pop(0)\r\n",
					"\r\n",
					"    # Debug prints if no match is found\r\n",
					"    #######logger.info(\"No match found. Last combined lines:\")\r\n",
					"    #if lines:\r\n",
					"        #######logger.info('\\n'.join(lines))\r\n",
					"    #######logger.info(\"Target string:\")\r\n",
					"    #######logger.info(target_string)\r\n",
					"    return False\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"def parse_log_line(line):\r\n",
					"    # Split the line at the first occurrence of \"::\"\r\n",
					"    parts = line.split(\"::\", 1)\r\n",
					"    \r\n",
					"    # Check if the line was correctly split into two parts\r\n",
					"    if len(parts) == 2:\r\n",
					"        timestamp_str, message = parts\r\n",
					"        try:\r\n",
					"            # Convert the timestamp string to a datetime object\r\n",
					"            timestamp = datetime.strptime(timestamp_str.strip(), \"%d/%m/%Y %H:%M:%S\")\r\n",
					"            return timestamp, message.strip()\r\n",
					"        except ValueError:\r\n",
					"            # Handle the case where the timestamp is not in the expected format\r\n",
					"            return None, None\r\n",
					"    else:\r\n",
					"        # The line did not contain \"::\" or contained it more than once\r\n",
					"        return line,None\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"    \r\n",
					"def calculate_duration(start_time,end_time):\r\n",
					"    if start_time is not None and end_time is not None:\r\n",
					"        duration_sec = (end_time - start_time).total_seconds()\r\n",
					"    else:\r\n",
					"        duration_sec = None\r\n",
					"\r\n",
					"    return duration_sec\r\n",
					"\r\n",
					"    "
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"metadata": {
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# **START THE LOG ANALYSER**"
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Purpose: To produce an output CSV of all tables and associated columns that Passed or Failed from one or more TDM executions.\r\n",
					"# Author: Tristan Darmalingam\r\n",
					"import os\r\n",
					"import pandas as pd\r\n",
					"from datetime import datetime\r\n",
					"import argparse\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# Register the parse_log_line function as a UDF (User Defined Function)\r\n",
					"# spark.udf.register(\"parse_log_line\", parse_log_line)\r\n",
					"\r\n",
					"# # Process the DataFrame\r\n",
					"# processed_df = df.selectExpr(\"parse_log_line(value) as parsed\").selectExpr(\"parsed[0] as timestamp\", \"parsed[1] as message\")\r\n",
					"\r\n",
					"# # Show the processed DataFrame\r\n",
					"# processed_df.show()\r\n",
					"\r\n",
					"# You can perform further analysis or processing on the processed DataFrame as needed\r\n",
					""
				],
				"execution_count": 7
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"file_path = 'wasbs://tdmfilesystem@tdmstoragegen2.blob.core.windows.net/landing/PS/Peoplesoft_PSADM_DEV4_Masking_Config_IT1_Implementation_20.12.2023.txt'"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"def log_analyzer(file_path):    \r\n",
					"    current_rows = None\r\n",
					"    current_distinct_rows = None\r\n",
					"    current_schema = None\r\n",
					"    current_table = None\r\n",
					"    current_column = None\r\n",
					"    live_column = False\r\n",
					"    start_time = None\r\n",
					"    end_time = None\r\n",
					"    cycle_num = None\r\n",
					"    duration_sec = None\r\n",
					"    duration_min = None\r\n",
					"    status = None\r\n",
					"    error = None\r\n",
					"    mask_operations = []\r\n",
					"    column_failures = []\r\n",
					"    post_mask_operations = False\r\n",
					"\r\n",
					"    # Read the log file\r\n",
					"    try:\r\n",
					"        # Initialize SparkSession\r\n",
					"        spark = SparkSession.builder \\\r\n",
					"            .appName(\"LogAnalysis\") \\\r\n",
					"            .getOrCreate()\r\n",
					"\r\n",
					"                    # Read the file into a DataFrame\r\n",
					"        df = spark.read.text(file_path)\r\n",
					"        #######logger.info(f\"Loading Enov8 TDM Execution File: {file_path}\")\r\n",
					"        \r\n",
					"        cycle_num = 0\r\n",
					"        if find_multiline_font(file_path,start_value):\r\n",
					"            cycle_num +=1\r\n",
					"\r\n",
					"        # with open(file_path, 'r', encoding='utf-8') as file:\r\n",
					"        #     #######logger.info(f\"Loaded TDM Execution File...Analysing Execution from path: {file_path}\")\r\n",
					"        #     print()\r\n",
					"\r\n",
					"            line_num = 0\r\n",
					"\r\n",
					"            for line in df.collect():\r\n",
					"                line_num +=1\r\n",
					"                timestamp, message = parse_log_line(line.value)\r\n",
					"\r\n",
					"                #If line does not contain \"::\" separator                \r\n",
					"                #if message is not None:\r\n",
					"                    #build out more functionality later\r\n",
					"                    #pass\r\n",
					"\r\n",
					"                # Only proceed if both timestamp and message are not None\r\n",
					"                if timestamp is not None and message is not None:\r\n",
					"                    # Extract timestamp as datetime object\r\n",
					"                    timestamp = datetime.strptime(str(timestamp), \"%Y-%m-%d %H:%M:%S\")\r\n",
					"                    #######logger.info(message.split())\r\n",
					"                    \r\n",
					"                    message_array = message.split()\r\n",
					"                    #message_len = len(message_array)\r\n",
					"\r\n",
					"                    #Old DCS logs - Check for new connection attempt - indicating new cycle has started\r\n",
					"                    if \"MASKING\" in message and \"HAS\" in message and \"STARTED\" in message:\r\n",
					"                        cycle_num +=1  \r\n",
					"\r\n",
					"                    #Schema Name\r\n",
					"                    if \"CONNECTED\" in message and \"Schema:\" in message:\r\n",
					"                        current_schema = message_array[4]\r\n",
					"\r\n",
					"                    #Table Name\r\n",
					"                    if \"TABLE\" in message and \"Mask Started\" in message:\r\n",
					"                        current_table = message_array[2]\r\n",
					"\r\n",
					"                    #Column Name\r\n",
					"                    if \"COLUMN\" in message and \"Mask Started\" in message:\r\n",
					"                        if post_mask_operations:\r\n",
					"                            current_column = None\r\n",
					"                        current_column = message_array[2]\r\n",
					"                        live_column = True\r\n",
					"                        start_time = timestamp\r\n",
					"\r\n",
					"                    #Row Count\r\n",
					"                    if \"CALCULATED\" in message and \"Row\" in message and \"Count\" and \"for\" in message and \"=\" in message:\r\n",
					"                        current_rows = message_array[8]\r\n",
					"                        #######logger.info(current_rows)\r\n",
					"                    \r\n",
					"                    #Check for no data in column\r\n",
					"                    if \"NO Data\" in message or \"No Data\" in message:\r\n",
					"                        error = message\r\n",
					"                        current_distinct_rows = 0\r\n",
					"                        column_failures.append({\r\n",
					"                            'status': 'No Data',\r\n",
					"                            'column': current_column,\r\n",
					"                            'table': current_table,\r\n",
					"                            'error': message\r\n",
					"                        })\r\n",
					"\r\n",
					"                    #Distinct Row Count\r\n",
					"                    if \"CALCULATED\" in message and \"Distinct\" in message and \"Row\" and \"Count\" in message and \"=\" in message:\r\n",
					"                        current_distinct_rows = message_array[5]\r\n",
					"\r\n",
					"                    #Check for Column Failures\r\n",
					"                    if ((\"Could\" in message and \"not\" in message) or (\"Could\" in message and \"Not\" in message and \"Mask\" in message and \"Column\" in message)) and (\"Could Not Enable\" not in message):\r\n",
					"                        error = message\r\n",
					"                        column_failures.append({\r\n",
					"                            'status': 'Exception',\r\n",
					"                            'column': current_column,\r\n",
					"                            'table': current_table,\r\n",
					"                            'error': message\r\n",
					"                        })\r\n",
					"                    #Check for ERRORS:\r\n",
					"                    if \"ERROR\" in message and \"Could Not Enable\" not in message:\r\n",
					"                        error = message\r\n",
					"                        column_failures.append({\r\n",
					"                            'status': 'Exception',\r\n",
					"                            'column': current_column,\r\n",
					"                            'table': current_table,\r\n",
					"                            'error': message\r\n",
					"                        })\r\n",
					"\r\n",
					"                    #Check for MySQL db driver Errors\r\n",
					"                    if (\"pymysql.err\" in message):\r\n",
					"                        error = message\r\n",
					"                        #######logger.info(f\"Error identified on {current_table}.{current_column} - {error}\")\r\n",
					"                        column_failures.append({\r\n",
					"                            'status': 'Exception',\r\n",
					"                            'column': current_column,\r\n",
					"                            'table': current_table,\r\n",
					"                            'error': message\r\n",
					"                        })\r\n",
					"                    \r\n",
					"                    #Check for script errors\r\n",
					"                    if (\"NOT FOUND\" in message or \".php\" in message or \".py\" in message):\r\n",
					"                        error = message\r\n",
					"                        #######logger.info(f\"Error identified on {current_table}.{current_column} - {error}\")\r\n",
					"                        column_failures.append({\r\n",
					"                            'status': 'Exception',\r\n",
					"                            'column': current_column,\r\n",
					"                            'table': current_table,\r\n",
					"                            'error': message\r\n",
					"                        })\r\n",
					"                    \r\n",
					"                    if \"Post-mask\" in message:\r\n",
					"                        post_mask_operations = True\r\n",
					"\r\n",
					"                    if \"COLUMN\" in message and \"Mask Finished\" in message:\r\n",
					"                        end_time = timestamp\r\n",
					"                        duration_sec = calculate_duration(start_time,end_time)\r\n",
					"                        duration_min = round(duration_sec / 60, 2)\r\n",
					"                        \r\n",
					"                        if len(column_failures)>0:\r\n",
					"                            last_error_column = column_failures[-1]\r\n",
					"                            #######logger.info(f\"Last error col: {last_error_column}\")\r\n",
					"                            if last_error_column['status'] == 'Failed' or last_error_column['status'] == 'Exception':\r\n",
					"                                error_column = last_error_column['column']\r\n",
					"                                error_table = last_error_column['table']\r\n",
					"                                if current_column == error_column and current_table == error_table:\r\n",
					"                                    status = last_error_column['status']\r\n",
					"                                else:\r\n",
					"                                    status = \"Passed\"\r\n",
					"\r\n",
					"                            mask_operations.append({\r\n",
					"                                'cycle': cycle_num,\r\n",
					"                                'schema': current_schema,\r\n",
					"                                'table': current_table,\r\n",
					"                                'row_count': current_rows,\r\n",
					"                                'distinct_row_count': current_distinct_rows,\r\n",
					"                                'column': current_column,\r\n",
					"                                'status': status,\r\n",
					"                                'start_time': start_time,\r\n",
					"                                'end_time': end_time,\r\n",
					"                                'duration(s)': duration_sec,\r\n",
					"                                'duration(min)':  duration_min,\r\n",
					"                                'error': error,\r\n",
					"                                'line_number': line_num\r\n",
					"                            })\r\n",
					"                            column_failures.clear()\r\n",
					"                        else:\r\n",
					"                            if current_column is not None:\r\n",
					"                                status = 'Passed'\r\n",
					"\r\n",
					"                                mask_operations.append({\r\n",
					"                                    'cycle': cycle_num,\r\n",
					"                                    'schema': current_schema,\r\n",
					"                                    'table': current_table,\r\n",
					"                                    'row_count': current_rows,\r\n",
					"                                    'distinct_row_count': current_distinct_rows,\r\n",
					"                                    'column': current_column,\r\n",
					"                                    'status': status,\r\n",
					"                                    'start_time': start_time,\r\n",
					"                                    'end_time': end_time,\r\n",
					"                                    'duration(s)': duration_sec,\r\n",
					"                                    'duration(min)':  duration_min,\r\n",
					"                                    'error': error,\r\n",
					"                                    'line_number': line_num\r\n",
					"                                })\r\n",
					"                                column_failures.clear()\r\n",
					"\r\n",
					"                        # Reset current column\r\n",
					"                        #current_column = None\r\n",
					"                        live_column = False \r\n",
					"                        current_rows = None\r\n",
					"                        current_distinct_rows = None\r\n",
					"                        error = None\r\n",
					"                        \r\n",
					"                    \r\n",
					"                    #Check if a live_column is True and then check if the table has ended or a new cycle has started, indicating the previous column failed due to connection issue etc\r\n",
					"                    if (live_column and \"TABLE\" in message and \"Mask\" in message and \"Ended\" in message) or (live_column and \"MASKING\" in message and \"HAS\" in message and \"STARTED\" in message):\r\n",
					"                        status = 'Failed'\r\n",
					"                        end_time = timestamp\r\n",
					"                        duration_sec = calculate_duration(start_time,end_time)\r\n",
					"                        duration_min = round(duration_sec / 60, 2)\r\n",
					"                        \r\n",
					"                        mask_operations.append({\r\n",
					"                            'cycle': cycle_num,\r\n",
					"                            'schema': current_schema,\r\n",
					"                            'table': current_table,\r\n",
					"                            'row_count': current_rows,\r\n",
					"                            'distinct_row_count': current_distinct_rows,\r\n",
					"                            'column': current_column,\r\n",
					"                            'status': status,\r\n",
					"                            'start_time': start_time,\r\n",
					"                            'end_time': end_time,\r\n",
					"                            'duration(s)': duration_sec,\r\n",
					"                            'duration(min)':  duration_min,\r\n",
					"                            'error': error,\r\n",
					"                            'line_number': line_num\r\n",
					"                        })\r\n",
					"                        # Reset current column\r\n",
					"                        #current_column = None\r\n",
					"                        live_column = False \r\n",
					"                        current_rows = None\r\n",
					"                        current_distinct_rows = None\r\n",
					"                        error = None\r\n",
					"                    \r\n",
					"                    else:\r\n",
					"                        if live_column:\r\n",
					"                            if len(column_failures)>0:\r\n",
					"\r\n",
					"                                status = 'Failed'\r\n",
					"                                end_time = timestamp\r\n",
					"                                duration_sec = calculate_duration(start_time,end_time)\r\n",
					"                                duration_min = round(duration_sec / 60, 2)\r\n",
					"\r\n",
					"                                mask_operations.append({\r\n",
					"                                    'cycle': cycle_num,\r\n",
					"                                    'schema': current_schema,\r\n",
					"                                    'table': current_table,\r\n",
					"                                    'row_count': current_rows,\r\n",
					"                                    'distinct_row_count': current_distinct_rows,\r\n",
					"                                    'column': current_column,\r\n",
					"                                    'status': status,\r\n",
					"                                    'start_time': start_time,\r\n",
					"                                    'end_time': end_time,\r\n",
					"                                    'duration(s)': duration_sec,\r\n",
					"                                    'duration(min)':  duration_min,\r\n",
					"                                    'error': error,\r\n",
					"                                    'line_number': line_num\r\n",
					"                                })\r\n",
					"                                column_failures.clear()\r\n",
					"                                live_column = False\r\n",
					"                                current_rows = None\r\n",
					"                                current_distinct_rows = None\r\n",
					"                                #current_column = None\r\n",
					"                                error = None\r\n",
					"\r\n",
					"    except OSError as e:\r\n",
					"        print(str(e))\r\n",
					"        ######logger.warning(f\"Could not open & read file: {file_path}, Error: {e}\")\r\n",
					"\r\n",
					"    # Create DataFrame\r\n",
					"    if len(mask_operations)>0:\r\n",
					"        ######logger.info(\"Building DataFrame\")\r\n",
					"        df = pd.DataFrame(mask_operations)\r\n",
					"        ######logger.info(\"Created DataFrame\")\r\n",
					"        print()\r\n",
					"    else:\r\n",
					"        df = None\r\n",
					"\r\n",
					"    ### PROCESS REPORT ###\r\n",
					"    #Extract File Name\r\n",
					"    # file_name = os.path.basename(file_path)\r\n",
					"    # if '.txt' in file_name: \r\n",
					"    #     file_report = file_name.replace('.txt','.csv')\r\n",
					"    # else:\r\n",
					"    #     file_report = file_name + '.csv'\r\n",
					"\r\n",
					"    # Change Directory to 'execution_results' folderCSV \r\n",
					"    # Check if results folder exists\r\n",
					"    # try:\r\n",
					"    #     listDir = os.listdir()\r\n",
					"    #     if 'execution_results' not in listDir or len(listDir)==0:\r\n",
					"    #         #Make new directory if it doesn't exist and change to it\r\n",
					"    #         os.mkdir(\"execution_results\")\r\n",
					"    #         ######logger.info(f\"Changed Directory to: {os.getcwd()}\")\r\n",
					"    #         os.chdir(\"execution_results\")\r\n",
					"    #     else:\r\n",
					"    #         #Change to directory if it does exist\r\n",
					"    #         current_dir = os.getcwd()\r\n",
					"    #         os.chdir(current_dir+\"/execution_results\")\r\n",
					"    #         ######logger.info(f\"Changed Directory to: {os.getcwd()}\")\r\n",
					"    # except OSError as e:\r\n",
					"    #     print(str(e))\r\n",
					"        ######logger.warning(f\"Could not create or move files in the current directory: {e}\")\r\n",
					"\r\n",
					"\r\n",
					"    return df\r\n",
					"\r\n",
					""
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import split, col, lit\r\n",
					"from pyspark.sql.functions import date_format\r\n",
					"from datetime import datetime\r\n",
					"from pyspark.sql.functions import year, month, dayofmonth, hour, minute, second, current_timestamp\r\n",
					"from pyspark.sql.functions import current_timestamp\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 10
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"mssparkutils.fs.help()"
				],
				"execution_count": 11
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# list_of_processed_folder = spark.sql('select distinct Processed_FOLDER_NAME from enov8_tdm.PIPELINE_CTL').collect()"
				],
				"execution_count": 12
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# for i in list_of_processed_folder:\r\n",
					"#     if '31-MAY-2024 22-55-43/logs_CDW_Mask - Azure MSSQL Mask Config People Subset-TDM-Automation_31-MAY-2024 22-55-43.txt' == i.Processed_FOLDER_NAME:\r\n",
					"#         print('found')\r\n",
					"#     print(i)"
				],
				"execution_count": 13
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"list_of_landing = mssparkutils.fs.ls('abfss://tdmfilesystem@tdmstoragegen2.dfs.core.windows.net/landing/Test_Automation')\r\n",
					"\r\n",
					"                                # Define the JDBC connection URL\r\n",
					"jdbc_url = \"jdbc:sqlserver://tdmsynapsetst.sql.azuresynapse.net:1433;database=tdmsynapsesqldedicated;user=sqladminuser@tdmsynapsetst;password=Enov8@2024;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=30;\"\r\n",
					"                        # Set up properties\r\n",
					"\r\n",
					"\r\n",
					"from datetime import datetime\r\n",
					"from pyspark.sql.functions import current_timestamp, substring\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"current_datetime = datetime.now()\r\n",
					"\r\n",
					"\r\n",
					"final_log = None\r\n",
					"\r\n",
					"for source in list_of_landing:\r\n",
					"\r\n",
					"    try:\r\n",
					"        print(source)\r\n",
					"        application_name = source.name\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"        for folder in mssparkutils.fs.ls(source.path):\r\n",
					"            print(\"folder \", folder.name, 'foler path \\n', folder.path)\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"            list_of_files = mssparkutils.fs.ls(folder.path)\r\n",
					"\r\n",
					"            max_id = spark.sql(f\"\"\"SELECT MAX(CYCLE_ID) from enov8_tdm.PIPELINE_CTL\"\"\")\r\n",
					"            MAX_LOAD_ID = max_id.collect()[0][0]\r\n",
					"            if MAX_LOAD_ID is None or MAX_LOAD_ID  == 0 :\r\n",
					"                LOAD_ID = 1\r\n",
					"            else:\r\n",
					"                LOAD_ID = MAX_LOAD_ID + 1 \r\n",
					"\r\n",
					"\r\n",
					"            max_RUN_ID = spark.sql('SELECT MAX(RUN_ID) + 1 from enov8_tdm.PIPELINE_CTL').collect()[0][0]\r\n",
					"\r\n",
					"            spark.sql(f\"\"\"INSERT INTO enov8_tdm.PIPELINE_CTL (RUN_ID, STAGE,CYCLE_ID,APPLICATION_NAME, PROCESSED_FOLDER_NAME, AUDIT_MESSAGE,STATUS,RUN_START_DTTM,RUN_END_DTTM)\r\n",
					"                                VALUES( {max_RUN_ID} , 'BRONZE',  CAST('{LOAD_ID}' as INT), '{application_name}',  '{folder.name}', NULL, 'REQUESTED', CAST('{current_datetime}' as TIMESTAMP), NULL )\"\"\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"                    \r\n",
					"            for file in list_of_files:\r\n",
					"\r\n",
					"                print('file_name', file)\r\n",
					"\r\n",
					"\r\n",
					"                if file.name.endswith('.txt'):\r\n",
					"                        \r\n",
					"                        \r\n",
					"                    file_path_dir = file.path\r\n",
					"\r\n",
					"                    print(file_path_dir)\r\n",
					"                    df = log_analyzer(file_path_dir)\r\n",
					"\r\n",
					"                    current_datetime = datetime.now()\r\n",
					"                    if df is None:\r\n",
					"                        continue\r\n",
					"                    else:\r\n",
					"                            \r\n",
					"                        log_df = spark.createDataFrame(df)\r\n",
					"\r\n",
					"\r\n",
					"                        # Assuming you have already created log_df DataFrame and performed necessary transformations\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"                        # Partition the DataFrame by specified columns\r\n",
					"                        partitioned_df = log_df.withColumn(\"ML_LOG_O_YEAR\", year(current_timestamp())) \\\r\n",
					"                                            .withColumn(\"ML_LOG_O_MONTH\", month(current_timestamp())) \\\r\n",
					"                                            .withColumn(\"ML_LOG_O_DAY\", dayofmonth(current_timestamp())) \\\r\n",
					"                                            .withColumn(\"ML_LOG_O_HOUR\", hour(current_timestamp())) \\\r\n",
					"                                            .withColumn(\"ML_LOG_O_MIN\", minute(current_timestamp())) \\\r\n",
					"                                            .withColumn(\"ML_LOG_APPLICATION_NAME\",lit(application_name) )\\\r\n",
					"                                            .withColumn(\"CYCLE_ID\" , lit(LOAD_ID))\r\n",
					"\r\n",
					"                        partitioned_df.createOrReplaceTempView('log')\r\n",
					"                        spark.sql(\"\"\"INSERT INTO enov8_tdm.log  (SELECT * FROM log)\"\"\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"                        partitioned_df = partitioned_df.withColumnRenamed('schema', 'TABLE_SCHEMA')\\\r\n",
					"                                        .withColumnRenamed('table', 'TABLE_NAME')\\\r\n",
					"                                        .withColumnRenamed('column', 'COLUMN_NAME')\\\r\n",
					"                                        .withColumnRenamed('duration(s)','duration_in_secs')\\\r\n",
					"                                        .withColumnRenamed('duration(min)', 'duration_in_mins')\r\n",
					"\r\n",
					"                        partitioned_df = partitioned_df.withColumn(\"cycle\", col(\"cycle\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"TABLE_SCHEMA\", col(\"TABLE_SCHEMA\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"TABLE_NAME\", col(\"TABLE_NAME\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"row_count\", col(\"row_count\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"distinct_row_count\", col(\"distinct_row_count\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"COLUMN_NAME\", col(\"COLUMN_NAME\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"status\", col(\"status\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"start_time\", col(\"start_time\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"end_time\", col(\"end_time\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"duration_in_secs\", col(\"duration_in_secs\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"duration_in_mins\", col(\"duration_in_mins\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"error\",   substring(col(\"error\"), 1, 2000).cast(\"string\")) \\\r\n",
					"                            .withColumn(\"line_number\", col(\"line_number\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"ML_LOG_O_YEAR\", col(\"ML_LOG_O_YEAR\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"ML_LOG_O_MONTH\", col(\"ML_LOG_O_MONTH\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"ML_LOG_O_DAY\", col(\"ML_LOG_O_DAY\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"ML_LOG_O_HOUR\", col(\"ML_LOG_O_HOUR\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"ML_LOG_O_MIN\", col(\"ML_LOG_O_MIN\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"ML_LOG_APPLICATION_NAME\", col(\"ML_LOG_APPLICATION_NAME\").cast(\"string\")) \\\r\n",
					"                            .withColumn(\"CYCLE_ID\", col(\"CYCLE_ID\").cast(\"string\"))\r\n",
					"\r\n",
					"                        partitioned_df.write.mode('append').jdbc(url=jdbc_url, table='dbo.log', properties={\"user\": 'sqladminuser', \"password\": 'Enov8@2024'})\r\n",
					"                else:\r\n",
					"                        config_df = spark.read.option(\"header\", True).csv(file.path)\r\n",
					"                        config_df = config_df.withColumn(\"SOURCE_OF_CONFIG\", lit(str(file.name)))\\\r\n",
					"                                            .withColumn(\"CYCLE_ID\", lit(str(LOAD_ID)) )\r\n",
					"\r\n",
					"                        if 'level' in config_df.columns:\r\n",
					"                            config_df = config_df.withColumnRenamed('level', 'PII Level')\\\r\n",
					"                                                    .withColumnRenamed('type', 'Pattern Type')\\\r\n",
					"                                                    .withColumnRenamed('pattern_name','Pattern' )\r\n",
					"\r\n",
					"                        if 'Table Name' in config_df.columns:\r\n",
					"                            config_df = config_df.withColumnRenamed('Table Name', 'Table')                           \r\n",
					"\r\n",
					"                        config_df = config_df.withColumnRenamed('Category', 'Category' )\\\r\n",
					"                                        .withColumnRenamed('Schema', 'TABLE_SCHEMA' )\\\r\n",
					"                                        .withColumnRenamed('Table', 'TABLE_NAME' )\\\r\n",
					"                                        .withColumnRenamed('Column', 'COLUMN_NAME' )\\\r\n",
					"                                        .withColumnRenamed('Data Type', 'Data_Type' )\\\r\n",
					"                                        .withColumnRenamed('Data Length', 'Data_Length' )\\\r\n",
					"                                        .withColumnRenamed('PII Level', 'PII_Level' )\\\r\n",
					"                                        .withColumnRenamed('Pattern Type', 'Pattern_Type' )\\\r\n",
					"                                        .withColumnRenamed('Pattern', 'Pattern'  )\\\r\n",
					"                                        .withColumnRenamed('Parameter', 'Parameter_CONFIG'  )\\\r\n",
					"                                        .withColumnRenamed('Lookup', 'Lookup'  )\\\r\n",
					"                                        .withColumnRenamed('SOURCE_OF_CONFIG', 'SOURCE_OF_CONFIG'  )\r\n",
					"\r\n",
					"                        print('write to config')\r\n",
					"\r\n",
					"                        config_df.write.mode('append').jdbc(url=jdbc_url, table='dbo.config', properties={\"user\": 'sqladminuser', \"password\": 'Enov8@2024'})\r\n",
					"\r\n",
					"            current_datetime = datetime.now()\r\n",
					"\r\n",
					"            spark.sql(f\"\"\"UPDATE enov8_tdm.PIPELINE_CTL SET STATUS = 'COMPLETED', RUN_END_DTTM = CAST('{current_datetime}' as TIMESTAMP), AUDIT_MESSAGE = 'SUCCESS'\r\n",
					"                            WHERE 1=1 and CYCLE_ID = '{LOAD_ID}'\r\n",
					"                            AND STAGE = 'BRONZE'\"\"\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"            current_datetime = datetime.now()\r\n",
					"            max_RUN_ID = spark.sql('SELECT MAX(RUN_ID) + 1 from enov8_tdm.PIPELINE_CTL').collect()[0][0]\r\n",
					"\r\n",
					"            spark.sql(f\"\"\"INSERT INTO enov8_tdm.PIPELINE_CTL (RUN_ID, STAGE,CYCLE_ID,APPLICATION_NAME, PROCESSED_FOLDER_NAME,AUDIT_MESSAGE ,STATUS,RUN_START_DTTM,RUN_END_DTTM)\r\n",
					"                                VALUES( {max_RUN_ID} , 'SILVER',  {LOAD_ID}, '{application_name}', '{folder.name}', NULL,'REQUESTED', CAST('{current_datetime}' as TIMESTAMP), NULL )\"\"\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"            bronze_log = spark.read.jdbc(url=jdbc_url, table='dbo.log', properties={\"user\": 'sqladminuser', \"password\": 'Enov8@2024'})\r\n",
					"            bronze_config = spark.read.jdbc(url=jdbc_url, table='dbo.config', properties={\"user\": 'sqladminuser', \"password\": 'Enov8@2024'})\r\n",
					"\r\n",
					"\r\n",
					"            bronze_log= bronze_log.filter(f\"CYCLE_ID == '{LOAD_ID}'\")\r\n",
					"\r\n",
					"            bronze_config= bronze_config.filter(f\"CYCLE_ID == '{LOAD_ID}'\")\r\n",
					"\r\n",
					"\r\n",
					"            # Perform inner join with explicit column qualification to resolve ambiguity\r\n",
					"            joined_df = bronze_log.alias(\"log\").join(\r\n",
					"                bronze_config.alias(\"config\"),\r\n",
					"                (col(\"log.CYCLE_ID\") == col(\"config.CYCLE_ID\")) &\r\n",
					"                (col(\"log.COLUMN_NAME\") == col(\"config.COLUMN_NAME\")),\r\n",
					"                \"inner\"\r\n",
					"            )\r\n",
					"\r\n",
					"            # Select specific columns, qualifying ambiguous columns\r\n",
					"            selected_columns = [\r\n",
					"                'log.cycle', 'log.TABLE_SCHEMA', 'log.TABLE_NAME', 'log.row_count', 'log.distinct_row_count',\r\n",
					"                'log.COLUMN_NAME', 'log.status', 'log.start_time', 'log.end_time', 'log.duration_in_secs',\r\n",
					"                'log.duration_in_mins', 'log.error', 'log.line_number', 'log.ML_LOG_O_YEAR', 'log.ML_LOG_O_MONTH',\r\n",
					"                'log.ML_LOG_O_DAY', 'log.ML_LOG_O_HOUR', 'log.ML_LOG_O_MIN', 'log.ML_LOG_APPLICATION_NAME',\r\n",
					"                'log.CYCLE_ID', 'config.Category', 'config.Data_Type', 'config.Data_Length', 'config.PII_Level',\r\n",
					"                'config.Pattern_Type', 'config.Pattern', 'config.Parameter_CONFIG', 'config.Lookup', 'config.SOURCE_OF_CONFIG'\r\n",
					"            ]\r\n",
					"\r\n",
					"            # Select columns from joined DataFrame\r\n",
					"            joined_df = joined_df.select([col(c) for c in selected_columns])\r\n",
					"\r\n",
					"            # Show the joined DataFrame\r\n",
					"            # joined_df.show()\r\n",
					"\r\n",
					"            # Write the DataFrame to the SQL database\r\n",
					"            joined_df.write.mode('append').jdbc(url=jdbc_url, table='enov8_silver.Masking_Validation', properties={\"user\": 'sqladminuser', \"password\": 'Enov8@2024'})\r\n",
					"\r\n",
					"\r\n",
					"            current_datetime = datetime.now()\r\n",
					"\r\n",
					"            spark.sql(f\"\"\"UPDATE enov8_tdm.PIPELINE_CTL SET STATUS = 'COMPLETED', RUN_END_DTTM = CAST('{current_datetime}' as TIMESTAMP), AUDIT_MESSAGE = 'SUCCESS'\r\n",
					"                            WHERE 1=1 and CYCLE_ID = '{LOAD_ID}'\r\n",
					"                            AND STAGE = 'SILVER'\"\"\")\r\n",
					"\r\n",
					"            mssparkutils.fs.mkdirs(f'abfss://tdmfilesystem@tdmstoragegen2.dfs.core.windows.net/archived/{application_name}/{folder.name}')\r\n",
					"            mssparkutils.fs.mv(folder.path, f'abfss://tdmfilesystem@tdmstoragegen2.dfs.core.windows.net/archived/{application_name}/{folder.name}')\r\n",
					"    except Exception as E:       \r\n",
					"        print(str(E))\r\n",
					"        current_datetime = datetime.now()\r\n",
					"        spark.sql(f\"\"\"UPDATE enov8_tdm.PIPELINE_CTL SET STATUS = 'FAILED', RUN_END_DTTM = CAST('{current_datetime}' as TIMESTAMP), AUDIT_MESSAGE = 'ERROR at {source.name}/{folder.name}'\r\n",
					"                WHERE 1=1 and CYCLE_ID = '{LOAD_ID}'\"\"\")\r\n",
					"\r\n",
					"\r\n",
					""
				],
				"execution_count": 31
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# # spark.sql('DROP TABLE enov8_tdm.PIPELINE_CTL')\r\n",
					"# spark.sql(\"\"\"CREATE TABLE enov8_tdm.PIPELINE_CTL (\r\n",
					"#     RUN_ID INT,\r\n",
					"#     STAGE VARCHAR(300),\r\n",
					"#     CYCLE_ID BIGINT,\r\n",
					"#     APPLICATION_NAME VARCHAR(200),\r\n",
					"#     PROCESSED_FOLDER_NAME VARCHAR(900),\r\n",
					"#     STATUS VARCHAR(300),\r\n",
					"#     AUDIT_MESSAGE STRING,\r\n",
					"#     RUN_START_DTTM TIMESTAMP,\r\n",
					"#     RUN_END_DTTM TIMESTAMP\r\n",
					"# )\r\n",
					"# USING DELTA\r\n",
					"# LOCATION 'abfss://tdmfilesystem@tdmstoragegen2.dfs.core.windows.net/control/'\r\n",
					"# \"\"\")\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# spark.sql(f\"\"\"INSERT INTO enov8_tdm.PIPELINE_CTL (RUN_ID, STAGE,CYCLE_ID,APPLICATION_NAME, PROCESSED_FOLDER_NAME,AUDIT_MESSAGE,STATUS,RUN_START_DTTM,RUN_END_DTTM)\r\n",
					"#                                 VALUES( 0, 'INIT',  NULL, NULL, NULL, NULL,NULL,NULL, NULL )\"\"\")\r\n",
					"\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# df = spark.sql(f\"\"\"select * from enov8_tdm.PIPELINE_CTL\"\"\")\r\n",
					"# df.display()\r\n",
					"\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"display(spark.sql(f\"\"\"select * from enov8_tdm.PIPELINE_CTL order by RUN_ID desc\"\"\"))"
				],
				"execution_count": 32
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# try:\r\n",
					"#     df = spark.read.format(\"csv\").option(\"header\", \"true\").load(\"abfss://tdmfilesystem@tdmstoragegen2.dfs.core.windows.net/bronze/data_configurations/Azure MSSQL Mask Config People Subset-TDM-Automation.csv\")\r\n",
					"#     df.show(5)\r\n",
					"#     print(\"Read operation successful.\")\r\n",
					"# except Exception as e:\r\n",
					"#     print(f\"Read operation failed: {e}\")\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# # Define the JDBC connection URL\r\n",
					"# jdbc_url = \"jdbc:sqlserver://tdmsynapsetst.sql.azuresynapse.net:1433;database=tdmsynapsesqldedicated;user=sqladminuser@tdmsynapsetst;password=Enov8@2024;encrypt=true;trustServerCertificate=false;hostNameInCertificate=*.sql.azuresynapse.net;loginTimeout=30;\"\r\n",
					"# # Set up properties\r\n",
					"\r\n",
					"\r\n",
					"\r\n",
					"# tables = partitioned_df.write.mode('overwrite').jdbc(url=jdbc_url, table='dbo.LOG2', properties={\"user\": 'sqladminuser', \"password\": 'Enov8@2024'})\r\n",
					""
				]
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					""
				],
				"execution_count": 29
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": 3
			}
		]
	}
}